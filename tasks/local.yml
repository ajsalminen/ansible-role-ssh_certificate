---

- name: Create mkcert install directory at localhost
  file:
    path: '{{ ssl_certificate_mkcert_local_dir }}'
    state: directory
  delegate_to: localhost
  connection: local
  become: no

- name: Create mkcert install directory at target host
  file:
    path: '{{ ssl_certificate_mkcert_target_dir }}'
    state: directory

- name: Download mkcert from github (to localhost)
  get_url:
    url: '{{ ssl_certificate_mkcert_url }}'
    dest: '{{ ssl_certificate_mkcert_local_dir }}/mkcert'
    checksum: 'sha256:{{ssl_certificate_mkcert_checksum}}'
    mode: u=rwx,g=rx
  delegate_to: localhost
  connection: local
  become: no

- name: Download mkcert from github (to target host)
  get_url:
    url: '{{ ssl_certificate_mkcert_url }}'
    dest: '{{ ssl_certificate_mkcert_target_dir }}/mkcert'
    checksum: 'sha256:{{ssl_certificate_mkcert_checksum}}'
    mode: u=rwx,g=rx

# First install the local CA
- name: Install local CA
  command: '{{ ssl_certificate_mkcert_local_dir }}/mkcert -install' 
  delegate_to: localhost
  connection: local
  become: no

- name: Add domain suffix
  set_fact: 
    ssl_certificate_full_domain_name: '{{ ssl_certificate_key_common_name }}{{ ssl_certificate_mkcert_common_name_suffix }}'

- name: Combine all domain names into one list
  set_fact:
    ssl_certificate_all_domains: >
      '{{ [{{ ssl_certificate_full_domain_name }},
      *.{{ssl_certificate_full_domain_name}}] +
      ssl_certificate_mkcert_additional_names }}'

- name: Generate certificates with mkcert
  command: >
    {{ ssl_certificate_mkcert_local_dir }}/mkcert
    -cert-file {{ ssl_certificate_mkcert_generated_cert_dir }}/{{ ssl_certificate_chained }}
    -key-file {{ ssl_certificate_mkcert_generated_cert_dir }}/{{ ssl_certificate_key }}
    {{ ssl_certificate_all_domains |Â join(' ') }}
  delegate_to: localhost
  connection: local
  become: no

- name: Create directory for private key if it does not exist
  file:
    path: '{{ ssl_certificate_key_dir }}'
    state: directory

- name: Create directory for ssl certificate if it does not exist
  file:
    path: '{{ ssl_certificate_certificate_dir }}'
    state: directory

# Copy generated certificates to target host
- name: Copy certificate private key
  copy: 
    src: '{{ ssl_certificate_mkcert_generated_cert_dir }}/{{ssl_certificate_key}}'
    dest: '{{ ssl_certificate_key_dir }}/{{ssl_certificate_key}}'
    owner: root 
    group: '{{ ssl_certificate_group }}'
    mode: 'u=rw,g=r'

- name: Copy certificate
  copy: 
    src: '{{ ssl_certificate_mkcert_generated_cert_dir }}/{{ssl_certificate_chained}}'
    dest: '{{ ssl_certificate_certificate_dir }}/{{ssl_certificate_chained}}'
    owner: root 
    group: '{{ ssl_certificate_group }}'
    mode: 'u=rw,g=r,o=r'

- name: Check for rootCA.pem
  command: '{{ ssl_certificate_mkcert_local_dir }}/mkcert -CAROOT'
  register: root_certificate
  delegate_to: localhost
  connection: local
  become: no

- name: Create directory for the rootCA.pem
  file:
    path: '{{ ssl_certificate_mkcert_target_root_ca_dir }}'
    state: directory

# In order for target host to make valid calls with wget, curl etc. The local CA needs to be installed to target host.
- name: Copy rootCA.pem
  copy: 
    src: '{{ root_certificate.stdout }}/rootCA.pem'
    dest: '{{ ssl_certificate_mkcert_target_root_ca_dir }}/rootCA.pem'


- name: Install rootCA on target machine
  command: '{{ ssl_certificate_mkcert_target_dir }}/mkcert -install'
  environment:
    CAROOT: '{{ ssl_certificate_mkcert_target_root_ca_dir }}'

- debug:
    msg: 'Please restart all open browsers in order for the certificates to take effect.'
